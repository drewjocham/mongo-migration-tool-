name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GO_VERSION: "1.24"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: ./...

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=${GITHUB_REF_NAME:-${GITHUB_SHA::8}}
        BINARY_NAME=mongo-essential-${{ matrix.goos }}-${{ matrix.goarch }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        go build -ldflags="-s -w -X main.version=${VERSION}" -o ${BINARY_NAME} .

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: mongo-essential-*

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [test, lint, build, docker]
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries
        path: ./dist

    - name: Create checksums
      run: |
        cd dist
        sha256sum * > checksums.txt

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
        generate_release_notes: true

  homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [release]
    steps:
    - uses: actions/checkout@v4
      with:
        repository: jocham/homebrew-mongo-essential
        token: ${{ secrets.HOMEBREW_TAP_TOKEN }}

    - name: Update Homebrew formula
      run: |
        VERSION=${GITHUB_REF_NAME#v}
        TARBALL_URL="https://github.com/jocham/mongo-essential/archive/v${VERSION}.tar.gz"
        SHA256=$(curl -sL "${TARBALL_URL}" | sha256sum | cut -d' ' -f1)
        
        sed -i "s/version \".*\"/version \"${VERSION}\"/" Formula/mongo-essential.rb
        sed -i "s|url \".*\"|url \"${TARBALL_URL}\"|" Formula/mongo-essential.rb
        sed -i "s/sha256 \".*\"/sha256 \"${SHA256}\"/" Formula/mongo-essential.rb
        
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add Formula/mongo-essential.rb
        git commit -m "Update mongo-essential to v${VERSION}"
        git push

  docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Generate Go documentation
      run: |
        go install golang.org/x/tools/cmd/godoc@latest
        mkdir -p docs
        echo "# Go Documentation" > docs/godoc.md
        echo "" >> docs/godoc.md
        echo "Visit [pkg.go.dev](https://pkg.go.dev/github.com/jocham/mongo-migrate) for complete API documentation." >> docs/godoc.md

    - name: Update pkg.go.dev
      run: |
        curl -X POST "https://proxy.golang.org/github.com/jocham/mongo-migrate/@v/list"